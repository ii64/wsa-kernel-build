name: Kernel build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs: {}

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag wsa-kernel-build:ci

    - name: Getting kernel url and download
      shell: pwsh
      run: |
        $json = Invoke-RestMethod 'https://3rdpartysource.microsoft.com/downloads'
        $wsaKernel = $json | Where-Object Name -ILike '*WSA-Linux-Kernel.zip'
        echo "WSA Kernel URL: " $wsaKernel.url
        Invoke-WebRequest -Uri $wsaKernel.url -OutFile wsa-kernel.zip

    - name: Extract kernel
      run: |
        unzip -d . wsa-kernel.zip
        echo "WSA_KERNEL_DIR=$PWD/WSA-Linux-Kernel" >> $GITHUB_ENV

    - name: Setting configuration
      run: |
        mv ./x86.config $WSA_KERNEL_DIR/.config

    - name: Running build
      run: |
        docker run --rm -v "$WSA_KERNEL_DIR:/src" wsa-kernel-build:ci sh -c 'ls -lah . && make -j$(nproc) LLVM=1'

    - name: Create zip bzImage x86
      run: |
        zip -r ./bzImage-x86.zip --junk-paths $WSA_KERNEL_DIR/arch/x86/boot/bzImage


    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}_${{ github.sha }}
        release_name: ${{ github.ref }}
        body: |
          Artifact ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload bzImage x86
      id: upload_release_bzimage
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bzImage-x86.zip
        asset_name: bzImage-x86.zip
        asset_content_type: application/zip

        
      
      
